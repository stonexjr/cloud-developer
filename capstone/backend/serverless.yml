service:
  name: serverless-txn-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    TXNS_TABLE: TXNS-${self:provider.stage}
    TXN_INDEX: createdAtIndex
    IMAGES_S3_BUCKET: serverless-txn-image-jinrong-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    CONNECTIONS_TABLE: Connection-${self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TXNS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TXNS_TABLE}/index/${self:provider.environment.TXN_INDEX}

      # Allow Lambda function to generate signedURL to put object to S3
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

      # allow access to connection table that keep track of websocket connection
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

custom:
  topicName: serverless-txn-${self:provider.stage}
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram Personal Finacial Transcation app
        description: Serverless application for managing personal finacial transcation list
    models:
      - name: CreateTXNRequest
        contentType: application/json
        schema: ${file(src/models/create-txn-request.json)} # double check the path to the json file is correct, or else sls deploy would pass anyway but the validator wouldn't take effect
      - name: UpdateTXNRequest
        contentType: application/json
        schema: ${file(src/models/update-txn-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # Configure this function
  GetTxns:
    handler: src/lambda/http/getTxns.handler
    events:
      - http:
          method: get
          path: txns
          cors: true
          authorizer: Auth

  # Configure this function
  CreateTxn:
    handler: src/lambda/http/createTxn.handler
    events:
      - http:
          method: post
          path: txns
          cors: true
          reqValidatorName: RequestBodyValidator
          authorizer: Auth
          documentation:
            summary: Create a new TXN item
            description: Create a new TXN item
            requestModels:
              'application/json': CreateTXNRequest

  # Configure this function
  UpdateTxn:
    handler: src/lambda/http/updateTxn.handler
    events:
      - http:
          method: patch
          path: txns/{txnId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update an existing TXN item
            description: Update an existing TXN item
            requestModels:
              'application/json': UpdateTXNRequest

  # Configure this function
  DeleteTxn:
    handler: src/lambda/http/deleteTxn.handler
    events:
      - http:
          method: delete
          path: txns/{txnId}
          cors: true
          authorizer: Auth

  # Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: txns/{txnId}/attachment
          cors: true
          authorizer: Auth

  # Trigger lambda function by S3 bucket event. The course video mentioned that
  # it was not able to handle existing S3 bucket since the event would first
  # create a new bucket with the same name as the one created by AttachmentsBucket.
  # Now the serverless has resolved this issue since version 1.47.0. See: https://serverless.com/framework/docs/providers/aws/events/s3#using-existing-buckets
  SendUploadNotifications:
    handler: src/lambda/s3/sendNotifications.handler
    events:
      - s3:
          bucket: ${self:provider.environment.IMAGES_S3_BUCKET}
          event: s3:ObjectCreated:*
          existing: true
    environment: # it's environment NOT environments. or else you won't be able to access the env variable from within lambda function
      STAGE: ${self:provider.stage}
      API_ID:
        Ref: WebsocketsApi

  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect

  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect

resources:
  Resources:
    TXNSDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: txnId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId # partition key
            KeyType: HASH
          - AttributeName: txnId # sort key
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TXNS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TXN_INDEX}
            KeySchema:
              - AttributeName: createdAt
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    WebSocketConnectionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    # set correct CORS header in case Authorizer fails
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
